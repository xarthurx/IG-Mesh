// automatically generated by the FlatBuffers compiler, do not modify


#ifndef FLATBUFFERS_GENERATED_INTNESTEDARRAY_GSP_FB_H_
#define FLATBUFFERS_GENERATED_INTNESTEDARRAY_GSP_FB_H_

#include "flatbuffers/flatbuffers.h"

// Ensure the included flatbuffers.h is the same version as when this file was
// generated, otherwise it may not be compatible.
static_assert(FLATBUFFERS_VERSION_MAJOR == 25 &&
              FLATBUFFERS_VERSION_MINOR == 2 &&
              FLATBUFFERS_VERSION_REVISION == 10,
             "Non-compatible flatbuffers version included");

#include "base_generated.h"

namespace GSP {
namespace FB {

struct IntNestedArrayData;
struct IntNestedArrayDataBuilder;

struct IntNestedArrayData FLATBUFFERS_FINAL_CLASS : private ::flatbuffers::Table {
  typedef IntNestedArrayDataBuilder Builder;
  enum FlatBuffersVTableOffset FLATBUFFERS_VTABLE_UNDERLYING_TYPE {
    VT_VALUES = 4,
    VT_SIZES = 6
  };
  const ::flatbuffers::Vector<int32_t> *values() const {
    return GetPointer<const ::flatbuffers::Vector<int32_t> *>(VT_VALUES);
  }
  const ::flatbuffers::Vector<int32_t> *sizes() const {
    return GetPointer<const ::flatbuffers::Vector<int32_t> *>(VT_SIZES);
  }
  bool Verify(::flatbuffers::Verifier &verifier) const {
    return VerifyTableStart(verifier) &&
           VerifyOffset(verifier, VT_VALUES) &&
           verifier.VerifyVector(values()) &&
           VerifyOffset(verifier, VT_SIZES) &&
           verifier.VerifyVector(sizes()) &&
           verifier.EndTable();
  }
};

struct IntNestedArrayDataBuilder {
  typedef IntNestedArrayData Table;
  ::flatbuffers::FlatBufferBuilder &fbb_;
  ::flatbuffers::uoffset_t start_;
  void add_values(::flatbuffers::Offset<::flatbuffers::Vector<int32_t>> values) {
    fbb_.AddOffset(IntNestedArrayData::VT_VALUES, values);
  }
  void add_sizes(::flatbuffers::Offset<::flatbuffers::Vector<int32_t>> sizes) {
    fbb_.AddOffset(IntNestedArrayData::VT_SIZES, sizes);
  }
  explicit IntNestedArrayDataBuilder(::flatbuffers::FlatBufferBuilder &_fbb)
        : fbb_(_fbb) {
    start_ = fbb_.StartTable();
  }
  ::flatbuffers::Offset<IntNestedArrayData> Finish() {
    const auto end = fbb_.EndTable(start_);
    auto o = ::flatbuffers::Offset<IntNestedArrayData>(end);
    return o;
  }
};

inline ::flatbuffers::Offset<IntNestedArrayData> CreateIntNestedArrayData(
    ::flatbuffers::FlatBufferBuilder &_fbb,
    ::flatbuffers::Offset<::flatbuffers::Vector<int32_t>> values = 0,
    ::flatbuffers::Offset<::flatbuffers::Vector<int32_t>> sizes = 0) {
  IntNestedArrayDataBuilder builder_(_fbb);
  builder_.add_sizes(sizes);
  builder_.add_values(values);
  return builder_.Finish();
}

inline ::flatbuffers::Offset<IntNestedArrayData> CreateIntNestedArrayDataDirect(
    ::flatbuffers::FlatBufferBuilder &_fbb,
    const std::vector<int32_t> *values = nullptr,
    const std::vector<int32_t> *sizes = nullptr) {
  auto values__ = values ? _fbb.CreateVector<int32_t>(*values) : 0;
  auto sizes__ = sizes ? _fbb.CreateVector<int32_t>(*sizes) : 0;
  return GSP::FB::CreateIntNestedArrayData(
      _fbb,
      values__,
      sizes__);
}

inline const GSP::FB::IntNestedArrayData *GetIntNestedArrayData(const void *buf) {
  return ::flatbuffers::GetRoot<GSP::FB::IntNestedArrayData>(buf);
}

inline const GSP::FB::IntNestedArrayData *GetSizePrefixedIntNestedArrayData(const void *buf) {
  return ::flatbuffers::GetSizePrefixedRoot<GSP::FB::IntNestedArrayData>(buf);
}

inline bool VerifyIntNestedArrayDataBuffer(
    ::flatbuffers::Verifier &verifier) {
  return verifier.VerifyBuffer<GSP::FB::IntNestedArrayData>(nullptr);
}

inline bool VerifySizePrefixedIntNestedArrayDataBuffer(
    ::flatbuffers::Verifier &verifier) {
  return verifier.VerifySizePrefixedBuffer<GSP::FB::IntNestedArrayData>(nullptr);
}

inline void FinishIntNestedArrayDataBuffer(
    ::flatbuffers::FlatBufferBuilder &fbb,
    ::flatbuffers::Offset<GSP::FB::IntNestedArrayData> root) {
  fbb.Finish(root);
}

inline void FinishSizePrefixedIntNestedArrayDataBuffer(
    ::flatbuffers::FlatBufferBuilder &fbb,
    ::flatbuffers::Offset<GSP::FB::IntNestedArrayData> root) {
  fbb.FinishSizePrefixed(root);
}

}  // namespace FB
}  // namespace GSP

#endif  // FLATBUFFERS_GENERATED_INTNESTEDARRAY_GSP_FB_H_
