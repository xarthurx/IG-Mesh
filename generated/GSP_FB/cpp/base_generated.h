// automatically generated by the FlatBuffers compiler, do not modify


#ifndef FLATBUFFERS_GENERATED_BASE_GSP_FB_H_
#define FLATBUFFERS_GENERATED_BASE_GSP_FB_H_

#include "flatbuffers/flatbuffers.h"

// Ensure the included flatbuffers.h is the same version as when this file was
// generated, otherwise it may not be compatible.
static_assert(FLATBUFFERS_VERSION_MAJOR == 25 &&
              FLATBUFFERS_VERSION_MINOR == 2 &&
              FLATBUFFERS_VERSION_REVISION == 10,
             "Non-compatible flatbuffers version included");

namespace GSP {
namespace FB {

struct Vec3;

struct Vec2;

struct Vec3i;

struct Vec2i;

FLATBUFFERS_MANUALLY_ALIGNED_STRUCT(8) Vec3 FLATBUFFERS_FINAL_CLASS {
 private:
  double x_;
  double y_;
  double z_;

 public:
  Vec3()
      : x_(0),
        y_(0),
        z_(0) {
  }
  Vec3(double _x, double _y, double _z)
      : x_(::flatbuffers::EndianScalar(_x)),
        y_(::flatbuffers::EndianScalar(_y)),
        z_(::flatbuffers::EndianScalar(_z)) {
  }
  double x() const {
    return ::flatbuffers::EndianScalar(x_);
  }
  double y() const {
    return ::flatbuffers::EndianScalar(y_);
  }
  double z() const {
    return ::flatbuffers::EndianScalar(z_);
  }
};
FLATBUFFERS_STRUCT_END(Vec3, 24);

FLATBUFFERS_MANUALLY_ALIGNED_STRUCT(8) Vec2 FLATBUFFERS_FINAL_CLASS {
 private:
  double x_;
  double y_;

 public:
  Vec2()
      : x_(0),
        y_(0) {
  }
  Vec2(double _x, double _y)
      : x_(::flatbuffers::EndianScalar(_x)),
        y_(::flatbuffers::EndianScalar(_y)) {
  }
  double x() const {
    return ::flatbuffers::EndianScalar(x_);
  }
  double y() const {
    return ::flatbuffers::EndianScalar(y_);
  }
};
FLATBUFFERS_STRUCT_END(Vec2, 16);

FLATBUFFERS_MANUALLY_ALIGNED_STRUCT(4) Vec3i FLATBUFFERS_FINAL_CLASS {
 private:
  int32_t x_;
  int32_t y_;
  int32_t z_;

 public:
  Vec3i()
      : x_(0),
        y_(0),
        z_(0) {
  }
  Vec3i(int32_t _x, int32_t _y, int32_t _z)
      : x_(::flatbuffers::EndianScalar(_x)),
        y_(::flatbuffers::EndianScalar(_y)),
        z_(::flatbuffers::EndianScalar(_z)) {
  }
  int32_t x() const {
    return ::flatbuffers::EndianScalar(x_);
  }
  int32_t y() const {
    return ::flatbuffers::EndianScalar(y_);
  }
  int32_t z() const {
    return ::flatbuffers::EndianScalar(z_);
  }
};
FLATBUFFERS_STRUCT_END(Vec3i, 12);

FLATBUFFERS_MANUALLY_ALIGNED_STRUCT(4) Vec2i FLATBUFFERS_FINAL_CLASS {
 private:
  int32_t x_;
  int32_t y_;

 public:
  Vec2i()
      : x_(0),
        y_(0) {
  }
  Vec2i(int32_t _x, int32_t _y)
      : x_(::flatbuffers::EndianScalar(_x)),
        y_(::flatbuffers::EndianScalar(_y)) {
  }
  int32_t x() const {
    return ::flatbuffers::EndianScalar(x_);
  }
  int32_t y() const {
    return ::flatbuffers::EndianScalar(y_);
  }
};
FLATBUFFERS_STRUCT_END(Vec2i, 8);

}  // namespace FB
}  // namespace GSP

#endif  // FLATBUFFERS_GENERATED_BASE_GSP_FB_H_
