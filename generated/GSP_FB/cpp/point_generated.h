// automatically generated by the FlatBuffers compiler, do not modify


#ifndef FLATBUFFERS_GENERATED_POINT_GSP_FB_H_
#define FLATBUFFERS_GENERATED_POINT_GSP_FB_H_

#include "flatbuffers/flatbuffers.h"

// Ensure the included flatbuffers.h is the same version as when this file was
// generated, otherwise it may not be compatible.
static_assert(FLATBUFFERS_VERSION_MAJOR == 25 &&
              FLATBUFFERS_VERSION_MINOR == 2 &&
              FLATBUFFERS_VERSION_REVISION == 10,
             "Non-compatible flatbuffers version included");

#include "base_generated.h"

namespace GSP {
namespace FB {

struct PointData;
struct PointDataBuilder;

struct PointData FLATBUFFERS_FINAL_CLASS : private ::flatbuffers::Table {
  typedef PointDataBuilder Builder;
  enum FlatBuffersVTableOffset FLATBUFFERS_VTABLE_UNDERLYING_TYPE {
    VT_POINT = 4
  };
  const GSP::FB::Vec3 *point() const {
    return GetStruct<const GSP::FB::Vec3 *>(VT_POINT);
  }
  bool Verify(::flatbuffers::Verifier &verifier) const {
    return VerifyTableStart(verifier) &&
           VerifyField<GSP::FB::Vec3>(verifier, VT_POINT, 8) &&
           verifier.EndTable();
  }
};

struct PointDataBuilder {
  typedef PointData Table;
  ::flatbuffers::FlatBufferBuilder &fbb_;
  ::flatbuffers::uoffset_t start_;
  void add_point(const GSP::FB::Vec3 *point) {
    fbb_.AddStruct(PointData::VT_POINT, point);
  }
  explicit PointDataBuilder(::flatbuffers::FlatBufferBuilder &_fbb)
        : fbb_(_fbb) {
    start_ = fbb_.StartTable();
  }
  ::flatbuffers::Offset<PointData> Finish() {
    const auto end = fbb_.EndTable(start_);
    auto o = ::flatbuffers::Offset<PointData>(end);
    return o;
  }
};

inline ::flatbuffers::Offset<PointData> CreatePointData(
    ::flatbuffers::FlatBufferBuilder &_fbb,
    const GSP::FB::Vec3 *point = nullptr) {
  PointDataBuilder builder_(_fbb);
  builder_.add_point(point);
  return builder_.Finish();
}

inline const GSP::FB::PointData *GetPointData(const void *buf) {
  return ::flatbuffers::GetRoot<GSP::FB::PointData>(buf);
}

inline const GSP::FB::PointData *GetSizePrefixedPointData(const void *buf) {
  return ::flatbuffers::GetSizePrefixedRoot<GSP::FB::PointData>(buf);
}

inline bool VerifyPointDataBuffer(
    ::flatbuffers::Verifier &verifier) {
  return verifier.VerifyBuffer<GSP::FB::PointData>(nullptr);
}

inline bool VerifySizePrefixedPointDataBuffer(
    ::flatbuffers::Verifier &verifier) {
  return verifier.VerifySizePrefixedBuffer<GSP::FB::PointData>(nullptr);
}

inline void FinishPointDataBuffer(
    ::flatbuffers::FlatBufferBuilder &fbb,
    ::flatbuffers::Offset<GSP::FB::PointData> root) {
  fbb.Finish(root);
}

inline void FinishSizePrefixedPointDataBuffer(
    ::flatbuffers::FlatBufferBuilder &fbb,
    ::flatbuffers::Offset<GSP::FB::PointData> root) {
  fbb.FinishSizePrefixed(root);
}

}  // namespace FB
}  // namespace GSP

#endif  // FLATBUFFERS_GENERATED_POINT_GSP_FB_H_
