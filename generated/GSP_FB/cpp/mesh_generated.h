// automatically generated by the FlatBuffers compiler, do not modify


#ifndef FLATBUFFERS_GENERATED_MESH_GSP_FB_H_
#define FLATBUFFERS_GENERATED_MESH_GSP_FB_H_

#include "flatbuffers/flatbuffers.h"

// Ensure the included flatbuffers.h is the same version as when this file was
// generated, otherwise it may not be compatible.
static_assert(FLATBUFFERS_VERSION_MAJOR == 25 &&
              FLATBUFFERS_VERSION_MINOR == 2 &&
              FLATBUFFERS_VERSION_REVISION == 10,
             "Non-compatible flatbuffers version included");

#include "base_generated.h"

namespace GSP {
namespace FB {

struct MeshData;
struct MeshDataBuilder;

struct MeshData FLATBUFFERS_FINAL_CLASS : private ::flatbuffers::Table {
  typedef MeshDataBuilder Builder;
  enum FlatBuffersVTableOffset FLATBUFFERS_VTABLE_UNDERLYING_TYPE {
    VT_VERTICES = 4,
    VT_FACES = 6
  };
  const ::flatbuffers::Vector<const GSP::FB::Vec3 *> *vertices() const {
    return GetPointer<const ::flatbuffers::Vector<const GSP::FB::Vec3 *> *>(VT_VERTICES);
  }
  const ::flatbuffers::Vector<const GSP::FB::Vec3i *> *faces() const {
    return GetPointer<const ::flatbuffers::Vector<const GSP::FB::Vec3i *> *>(VT_FACES);
  }
  bool Verify(::flatbuffers::Verifier &verifier) const {
    return VerifyTableStart(verifier) &&
           VerifyOffset(verifier, VT_VERTICES) &&
           verifier.VerifyVector(vertices()) &&
           VerifyOffset(verifier, VT_FACES) &&
           verifier.VerifyVector(faces()) &&
           verifier.EndTable();
  }
};

struct MeshDataBuilder {
  typedef MeshData Table;
  ::flatbuffers::FlatBufferBuilder &fbb_;
  ::flatbuffers::uoffset_t start_;
  void add_vertices(::flatbuffers::Offset<::flatbuffers::Vector<const GSP::FB::Vec3 *>> vertices) {
    fbb_.AddOffset(MeshData::VT_VERTICES, vertices);
  }
  void add_faces(::flatbuffers::Offset<::flatbuffers::Vector<const GSP::FB::Vec3i *>> faces) {
    fbb_.AddOffset(MeshData::VT_FACES, faces);
  }
  explicit MeshDataBuilder(::flatbuffers::FlatBufferBuilder &_fbb)
        : fbb_(_fbb) {
    start_ = fbb_.StartTable();
  }
  ::flatbuffers::Offset<MeshData> Finish() {
    const auto end = fbb_.EndTable(start_);
    auto o = ::flatbuffers::Offset<MeshData>(end);
    return o;
  }
};

inline ::flatbuffers::Offset<MeshData> CreateMeshData(
    ::flatbuffers::FlatBufferBuilder &_fbb,
    ::flatbuffers::Offset<::flatbuffers::Vector<const GSP::FB::Vec3 *>> vertices = 0,
    ::flatbuffers::Offset<::flatbuffers::Vector<const GSP::FB::Vec3i *>> faces = 0) {
  MeshDataBuilder builder_(_fbb);
  builder_.add_faces(faces);
  builder_.add_vertices(vertices);
  return builder_.Finish();
}

inline ::flatbuffers::Offset<MeshData> CreateMeshDataDirect(
    ::flatbuffers::FlatBufferBuilder &_fbb,
    const std::vector<GSP::FB::Vec3> *vertices = nullptr,
    const std::vector<GSP::FB::Vec3i> *faces = nullptr) {
  auto vertices__ = vertices ? _fbb.CreateVectorOfStructs<GSP::FB::Vec3>(*vertices) : 0;
  auto faces__ = faces ? _fbb.CreateVectorOfStructs<GSP::FB::Vec3i>(*faces) : 0;
  return GSP::FB::CreateMeshData(
      _fbb,
      vertices__,
      faces__);
}

inline const GSP::FB::MeshData *GetMeshData(const void *buf) {
  return ::flatbuffers::GetRoot<GSP::FB::MeshData>(buf);
}

inline const GSP::FB::MeshData *GetSizePrefixedMeshData(const void *buf) {
  return ::flatbuffers::GetSizePrefixedRoot<GSP::FB::MeshData>(buf);
}

inline bool VerifyMeshDataBuffer(
    ::flatbuffers::Verifier &verifier) {
  return verifier.VerifyBuffer<GSP::FB::MeshData>(nullptr);
}

inline bool VerifySizePrefixedMeshDataBuffer(
    ::flatbuffers::Verifier &verifier) {
  return verifier.VerifySizePrefixedBuffer<GSP::FB::MeshData>(nullptr);
}

inline void FinishMeshDataBuffer(
    ::flatbuffers::FlatBufferBuilder &fbb,
    ::flatbuffers::Offset<GSP::FB::MeshData> root) {
  fbb.Finish(root);
}

inline void FinishSizePrefixedMeshDataBuffer(
    ::flatbuffers::FlatBufferBuilder &fbb,
    ::flatbuffers::Offset<GSP::FB::MeshData> root) {
  fbb.FinishSizePrefixed(root);
}

}  // namespace FB
}  // namespace GSP

#endif  // FLATBUFFERS_GENERATED_MESH_GSP_FB_H_
