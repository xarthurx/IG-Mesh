// automatically generated by the FlatBuffers compiler, do not modify


#ifndef FLATBUFFERS_GENERATED_INTPAIRARRAY_GSP_FB_H_
#define FLATBUFFERS_GENERATED_INTPAIRARRAY_GSP_FB_H_

#include "flatbuffers/flatbuffers.h"

// Ensure the included flatbuffers.h is the same version as when this file was
// generated, otherwise it may not be compatible.
static_assert(FLATBUFFERS_VERSION_MAJOR == 25 &&
              FLATBUFFERS_VERSION_MINOR == 2 &&
              FLATBUFFERS_VERSION_REVISION == 10,
             "Non-compatible flatbuffers version included");

#include "base_generated.h"

namespace GSP {
namespace FB {

struct IntPairArrayData;
struct IntPairArrayDataBuilder;

struct IntPairArrayData FLATBUFFERS_FINAL_CLASS : private ::flatbuffers::Table {
  typedef IntPairArrayDataBuilder Builder;
  enum FlatBuffersVTableOffset FLATBUFFERS_VTABLE_UNDERLYING_TYPE {
    VT_PAIRS = 4
  };
  const ::flatbuffers::Vector<const GSP::FB::Vec2i *> *pairs() const {
    return GetPointer<const ::flatbuffers::Vector<const GSP::FB::Vec2i *> *>(VT_PAIRS);
  }
  bool Verify(::flatbuffers::Verifier &verifier) const {
    return VerifyTableStart(verifier) &&
           VerifyOffset(verifier, VT_PAIRS) &&
           verifier.VerifyVector(pairs()) &&
           verifier.EndTable();
  }
};

struct IntPairArrayDataBuilder {
  typedef IntPairArrayData Table;
  ::flatbuffers::FlatBufferBuilder &fbb_;
  ::flatbuffers::uoffset_t start_;
  void add_pairs(::flatbuffers::Offset<::flatbuffers::Vector<const GSP::FB::Vec2i *>> pairs) {
    fbb_.AddOffset(IntPairArrayData::VT_PAIRS, pairs);
  }
  explicit IntPairArrayDataBuilder(::flatbuffers::FlatBufferBuilder &_fbb)
        : fbb_(_fbb) {
    start_ = fbb_.StartTable();
  }
  ::flatbuffers::Offset<IntPairArrayData> Finish() {
    const auto end = fbb_.EndTable(start_);
    auto o = ::flatbuffers::Offset<IntPairArrayData>(end);
    return o;
  }
};

inline ::flatbuffers::Offset<IntPairArrayData> CreateIntPairArrayData(
    ::flatbuffers::FlatBufferBuilder &_fbb,
    ::flatbuffers::Offset<::flatbuffers::Vector<const GSP::FB::Vec2i *>> pairs = 0) {
  IntPairArrayDataBuilder builder_(_fbb);
  builder_.add_pairs(pairs);
  return builder_.Finish();
}

inline ::flatbuffers::Offset<IntPairArrayData> CreateIntPairArrayDataDirect(
    ::flatbuffers::FlatBufferBuilder &_fbb,
    const std::vector<GSP::FB::Vec2i> *pairs = nullptr) {
  auto pairs__ = pairs ? _fbb.CreateVectorOfStructs<GSP::FB::Vec2i>(*pairs) : 0;
  return GSP::FB::CreateIntPairArrayData(
      _fbb,
      pairs__);
}

inline const GSP::FB::IntPairArrayData *GetIntPairArrayData(const void *buf) {
  return ::flatbuffers::GetRoot<GSP::FB::IntPairArrayData>(buf);
}

inline const GSP::FB::IntPairArrayData *GetSizePrefixedIntPairArrayData(const void *buf) {
  return ::flatbuffers::GetSizePrefixedRoot<GSP::FB::IntPairArrayData>(buf);
}

inline bool VerifyIntPairArrayDataBuffer(
    ::flatbuffers::Verifier &verifier) {
  return verifier.VerifyBuffer<GSP::FB::IntPairArrayData>(nullptr);
}

inline bool VerifySizePrefixedIntPairArrayDataBuffer(
    ::flatbuffers::Verifier &verifier) {
  return verifier.VerifySizePrefixedBuffer<GSP::FB::IntPairArrayData>(nullptr);
}

inline void FinishIntPairArrayDataBuffer(
    ::flatbuffers::FlatBufferBuilder &fbb,
    ::flatbuffers::Offset<GSP::FB::IntPairArrayData> root) {
  fbb.Finish(root);
}

inline void FinishSizePrefixedIntPairArrayDataBuffer(
    ::flatbuffers::FlatBufferBuilder &fbb,
    ::flatbuffers::Offset<GSP::FB::IntPairArrayData> root) {
  fbb.FinishSizePrefixed(root);
}

}  // namespace FB
}  // namespace GSP

#endif  // FLATBUFFERS_GENERATED_INTPAIRARRAY_GSP_FB_H_
