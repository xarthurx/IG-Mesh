// <auto-generated>
//  automatically generated by the FlatBuffers compiler, do not modify
// </auto-generated>

namespace GSP.FB
{

using global::System;
using global::System.Collections.Generic;
using global::Google.FlatBuffers;

public struct DoubleArrayData : IFlatbufferObject
{
  private Table __p;
  public ByteBuffer ByteBuffer { get { return __p.bb; } }
  public static void ValidateVersion() { FlatBufferConstants.FLATBUFFERS_25_2_10(); }
  public static DoubleArrayData GetRootAsDoubleArrayData(ByteBuffer _bb) { return GetRootAsDoubleArrayData(_bb, new DoubleArrayData()); }
  public static DoubleArrayData GetRootAsDoubleArrayData(ByteBuffer _bb, DoubleArrayData obj) { return (obj.__assign(_bb.GetInt(_bb.Position) + _bb.Position, _bb)); }
  public static bool VerifyDoubleArrayData(ByteBuffer _bb) {Google.FlatBuffers.Verifier verifier = new Google.FlatBuffers.Verifier(_bb); return verifier.VerifyBuffer("", false, DoubleArrayDataVerify.Verify); }
  public void __init(int _i, ByteBuffer _bb) { __p = new Table(_i, _bb); }
  public DoubleArrayData __assign(int _i, ByteBuffer _bb) { __init(_i, _bb); return this; }

  public double Values(int j) { int o = __p.__offset(4); return o != 0 ? __p.bb.GetDouble(__p.__vector(o) + j * 8) : (double)0; }
  public int ValuesLength { get { int o = __p.__offset(4); return o != 0 ? __p.__vector_len(o) : 0; } }
#if ENABLE_SPAN_T
  public Span<double> GetValuesBytes() { return __p.__vector_as_span<double>(4, 8); }
#else
  public ArraySegment<byte>? GetValuesBytes() { return __p.__vector_as_arraysegment(4); }
#endif
  public double[] GetValuesArray() { return __p.__vector_as_array<double>(4); }

  public static Offset<GSP.FB.DoubleArrayData> CreateDoubleArrayData(FlatBufferBuilder builder,
      VectorOffset valuesOffset = default(VectorOffset)) {
    builder.StartTable(1);
    DoubleArrayData.AddValues(builder, valuesOffset);
    return DoubleArrayData.EndDoubleArrayData(builder);
  }

  public static void StartDoubleArrayData(FlatBufferBuilder builder) { builder.StartTable(1); }
  public static void AddValues(FlatBufferBuilder builder, VectorOffset valuesOffset) { builder.AddOffset(0, valuesOffset.Value, 0); }
  public static VectorOffset CreateValuesVector(FlatBufferBuilder builder, double[] data) { builder.StartVector(8, data.Length, 8); for (int i = data.Length - 1; i >= 0; i--) builder.AddDouble(data[i]); return builder.EndVector(); }
  public static VectorOffset CreateValuesVectorBlock(FlatBufferBuilder builder, double[] data) { builder.StartVector(8, data.Length, 8); builder.Add(data); return builder.EndVector(); }
  public static VectorOffset CreateValuesVectorBlock(FlatBufferBuilder builder, ArraySegment<double> data) { builder.StartVector(8, data.Count, 8); builder.Add(data); return builder.EndVector(); }
  public static VectorOffset CreateValuesVectorBlock(FlatBufferBuilder builder, IntPtr dataPtr, int sizeInBytes) { builder.StartVector(1, sizeInBytes, 1); builder.Add<double>(dataPtr, sizeInBytes); return builder.EndVector(); }
  public static void StartValuesVector(FlatBufferBuilder builder, int numElems) { builder.StartVector(8, numElems, 8); }
  public static Offset<GSP.FB.DoubleArrayData> EndDoubleArrayData(FlatBufferBuilder builder) {
    int o = builder.EndTable();
    return new Offset<GSP.FB.DoubleArrayData>(o);
  }
  public static void FinishDoubleArrayDataBuffer(FlatBufferBuilder builder, Offset<GSP.FB.DoubleArrayData> offset) { builder.Finish(offset.Value); }
  public static void FinishSizePrefixedDoubleArrayDataBuffer(FlatBufferBuilder builder, Offset<GSP.FB.DoubleArrayData> offset) { builder.FinishSizePrefixed(offset.Value); }
  public DoubleArrayDataT UnPack() {
    var _o = new DoubleArrayDataT();
    this.UnPackTo(_o);
    return _o;
  }
  public void UnPackTo(DoubleArrayDataT _o) {
    _o.Values = new List<double>();
    for (var _j = 0; _j < this.ValuesLength; ++_j) {_o.Values.Add(this.Values(_j));}
  }
  public static Offset<GSP.FB.DoubleArrayData> Pack(FlatBufferBuilder builder, DoubleArrayDataT _o) {
    if (_o == null) return default(Offset<GSP.FB.DoubleArrayData>);
    var _values = default(VectorOffset);
    if (_o.Values != null) {
      var __values = _o.Values.ToArray();
      _values = CreateValuesVector(builder, __values);
    }
    return CreateDoubleArrayData(
      builder,
      _values);
  }
}

public class DoubleArrayDataT
{
  public List<double> Values { get; set; }

  public DoubleArrayDataT() {
    this.Values = null;
  }
  public static DoubleArrayDataT DeserializeFromBinary(byte[] fbBuffer) {
    return DoubleArrayData.GetRootAsDoubleArrayData(new ByteBuffer(fbBuffer)).UnPack();
  }
  public byte[] SerializeToBinary() {
    var fbb = new FlatBufferBuilder(0x10000);
    DoubleArrayData.FinishDoubleArrayDataBuffer(fbb, DoubleArrayData.Pack(fbb, this));
    return fbb.DataBuffer.ToSizedArray();
  }
}


static public class DoubleArrayDataVerify
{
  static public bool Verify(Google.FlatBuffers.Verifier verifier, uint tablePos)
  {
    return verifier.VerifyTableStart(tablePos)
      && verifier.VerifyVectorOfData(tablePos, 4 /*Values*/, 8 /*double*/, false)
      && verifier.VerifyTableEnd(tablePos);
  }
}

}
