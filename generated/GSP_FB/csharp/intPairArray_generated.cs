// <auto-generated>
//  automatically generated by the FlatBuffers compiler, do not modify
// </auto-generated>

namespace GSP.FB
{

using global::System;
using global::System.Collections.Generic;
using global::Google.FlatBuffers;

public struct IntPairArrayData : IFlatbufferObject
{
  private Table __p;
  public ByteBuffer ByteBuffer { get { return __p.bb; } }
  public static void ValidateVersion() { FlatBufferConstants.FLATBUFFERS_25_2_10(); }
  public static IntPairArrayData GetRootAsIntPairArrayData(ByteBuffer _bb) { return GetRootAsIntPairArrayData(_bb, new IntPairArrayData()); }
  public static IntPairArrayData GetRootAsIntPairArrayData(ByteBuffer _bb, IntPairArrayData obj) { return (obj.__assign(_bb.GetInt(_bb.Position) + _bb.Position, _bb)); }
  public static bool VerifyIntPairArrayData(ByteBuffer _bb) {Google.FlatBuffers.Verifier verifier = new Google.FlatBuffers.Verifier(_bb); return verifier.VerifyBuffer("", false, IntPairArrayDataVerify.Verify); }
  public void __init(int _i, ByteBuffer _bb) { __p = new Table(_i, _bb); }
  public IntPairArrayData __assign(int _i, ByteBuffer _bb) { __init(_i, _bb); return this; }

  public GSP.FB.Vec2i? Pairs(int j) { int o = __p.__offset(4); return o != 0 ? (GSP.FB.Vec2i?)(new GSP.FB.Vec2i()).__assign(__p.__vector(o) + j * 8, __p.bb) : null; }
  public int PairsLength { get { int o = __p.__offset(4); return o != 0 ? __p.__vector_len(o) : 0; } }

  public static Offset<GSP.FB.IntPairArrayData> CreateIntPairArrayData(FlatBufferBuilder builder,
      VectorOffset pairsOffset = default(VectorOffset)) {
    builder.StartTable(1);
    IntPairArrayData.AddPairs(builder, pairsOffset);
    return IntPairArrayData.EndIntPairArrayData(builder);
  }

  public static void StartIntPairArrayData(FlatBufferBuilder builder) { builder.StartTable(1); }
  public static void AddPairs(FlatBufferBuilder builder, VectorOffset pairsOffset) { builder.AddOffset(0, pairsOffset.Value, 0); }
  public static void StartPairsVector(FlatBufferBuilder builder, int numElems) { builder.StartVector(8, numElems, 4); }
  public static Offset<GSP.FB.IntPairArrayData> EndIntPairArrayData(FlatBufferBuilder builder) {
    int o = builder.EndTable();
    return new Offset<GSP.FB.IntPairArrayData>(o);
  }
  public static void FinishIntPairArrayDataBuffer(FlatBufferBuilder builder, Offset<GSP.FB.IntPairArrayData> offset) { builder.Finish(offset.Value); }
  public static void FinishSizePrefixedIntPairArrayDataBuffer(FlatBufferBuilder builder, Offset<GSP.FB.IntPairArrayData> offset) { builder.FinishSizePrefixed(offset.Value); }
  public IntPairArrayDataT UnPack() {
    var _o = new IntPairArrayDataT();
    this.UnPackTo(_o);
    return _o;
  }
  public void UnPackTo(IntPairArrayDataT _o) {
    _o.Pairs = new List<GSP.FB.Vec2iT>();
    for (var _j = 0; _j < this.PairsLength; ++_j) {_o.Pairs.Add(this.Pairs(_j).HasValue ? this.Pairs(_j).Value.UnPack() : null);}
  }
  public static Offset<GSP.FB.IntPairArrayData> Pack(FlatBufferBuilder builder, IntPairArrayDataT _o) {
    if (_o == null) return default(Offset<GSP.FB.IntPairArrayData>);
    var _pairs = default(VectorOffset);
    if (_o.Pairs != null) {
      StartPairsVector(builder, _o.Pairs.Count);
      for (var _j = _o.Pairs.Count - 1; _j >= 0; --_j) { GSP.FB.Vec2i.Pack(builder, _o.Pairs[_j]); }
      _pairs = builder.EndVector();
    }
    return CreateIntPairArrayData(
      builder,
      _pairs);
  }
}

public class IntPairArrayDataT
{
  public List<GSP.FB.Vec2iT> Pairs { get; set; }

  public IntPairArrayDataT() {
    this.Pairs = null;
  }
  public static IntPairArrayDataT DeserializeFromBinary(byte[] fbBuffer) {
    return IntPairArrayData.GetRootAsIntPairArrayData(new ByteBuffer(fbBuffer)).UnPack();
  }
  public byte[] SerializeToBinary() {
    var fbb = new FlatBufferBuilder(0x10000);
    IntPairArrayData.FinishIntPairArrayDataBuffer(fbb, IntPairArrayData.Pack(fbb, this));
    return fbb.DataBuffer.ToSizedArray();
  }
}


static public class IntPairArrayDataVerify
{
  static public bool Verify(Google.FlatBuffers.Verifier verifier, uint tablePos)
  {
    return verifier.VerifyTableStart(tablePos)
      && verifier.VerifyVectorOfData(tablePos, 4 /*Pairs*/, 8 /*GSP.FB.Vec2i*/, false)
      && verifier.VerifyTableEnd(tablePos);
  }
}

}
