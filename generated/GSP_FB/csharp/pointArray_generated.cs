// <auto-generated>
//  automatically generated by the FlatBuffers compiler, do not modify
// </auto-generated>

namespace GSP.FB
{

using global::System;
using global::System.Collections.Generic;
using global::Google.FlatBuffers;

public struct PointArrayData : IFlatbufferObject
{
  private Table __p;
  public ByteBuffer ByteBuffer { get { return __p.bb; } }
  public static void ValidateVersion() { FlatBufferConstants.FLATBUFFERS_25_2_10(); }
  public static PointArrayData GetRootAsPointArrayData(ByteBuffer _bb) { return GetRootAsPointArrayData(_bb, new PointArrayData()); }
  public static PointArrayData GetRootAsPointArrayData(ByteBuffer _bb, PointArrayData obj) { return (obj.__assign(_bb.GetInt(_bb.Position) + _bb.Position, _bb)); }
  public static bool VerifyPointArrayData(ByteBuffer _bb) {Google.FlatBuffers.Verifier verifier = new Google.FlatBuffers.Verifier(_bb); return verifier.VerifyBuffer("", false, PointArrayDataVerify.Verify); }
  public void __init(int _i, ByteBuffer _bb) { __p = new Table(_i, _bb); }
  public PointArrayData __assign(int _i, ByteBuffer _bb) { __init(_i, _bb); return this; }

  public GSP.FB.Vec3? Points(int j) { int o = __p.__offset(4); return o != 0 ? (GSP.FB.Vec3?)(new GSP.FB.Vec3()).__assign(__p.__vector(o) + j * 24, __p.bb) : null; }
  public int PointsLength { get { int o = __p.__offset(4); return o != 0 ? __p.__vector_len(o) : 0; } }

  public static Offset<GSP.FB.PointArrayData> CreatePointArrayData(FlatBufferBuilder builder,
      VectorOffset pointsOffset = default(VectorOffset)) {
    builder.StartTable(1);
    PointArrayData.AddPoints(builder, pointsOffset);
    return PointArrayData.EndPointArrayData(builder);
  }

  public static void StartPointArrayData(FlatBufferBuilder builder) { builder.StartTable(1); }
  public static void AddPoints(FlatBufferBuilder builder, VectorOffset pointsOffset) { builder.AddOffset(0, pointsOffset.Value, 0); }
  public static void StartPointsVector(FlatBufferBuilder builder, int numElems) { builder.StartVector(24, numElems, 8); }
  public static Offset<GSP.FB.PointArrayData> EndPointArrayData(FlatBufferBuilder builder) {
    int o = builder.EndTable();
    return new Offset<GSP.FB.PointArrayData>(o);
  }
  public static void FinishPointArrayDataBuffer(FlatBufferBuilder builder, Offset<GSP.FB.PointArrayData> offset) { builder.Finish(offset.Value); }
  public static void FinishSizePrefixedPointArrayDataBuffer(FlatBufferBuilder builder, Offset<GSP.FB.PointArrayData> offset) { builder.FinishSizePrefixed(offset.Value); }
  public PointArrayDataT UnPack() {
    var _o = new PointArrayDataT();
    this.UnPackTo(_o);
    return _o;
  }
  public void UnPackTo(PointArrayDataT _o) {
    _o.Points = new List<GSP.FB.Vec3T>();
    for (var _j = 0; _j < this.PointsLength; ++_j) {_o.Points.Add(this.Points(_j).HasValue ? this.Points(_j).Value.UnPack() : null);}
  }
  public static Offset<GSP.FB.PointArrayData> Pack(FlatBufferBuilder builder, PointArrayDataT _o) {
    if (_o == null) return default(Offset<GSP.FB.PointArrayData>);
    var _points = default(VectorOffset);
    if (_o.Points != null) {
      StartPointsVector(builder, _o.Points.Count);
      for (var _j = _o.Points.Count - 1; _j >= 0; --_j) { GSP.FB.Vec3.Pack(builder, _o.Points[_j]); }
      _points = builder.EndVector();
    }
    return CreatePointArrayData(
      builder,
      _points);
  }
}

public class PointArrayDataT
{
  public List<GSP.FB.Vec3T> Points { get; set; }

  public PointArrayDataT() {
    this.Points = null;
  }
  public static PointArrayDataT DeserializeFromBinary(byte[] fbBuffer) {
    return PointArrayData.GetRootAsPointArrayData(new ByteBuffer(fbBuffer)).UnPack();
  }
  public byte[] SerializeToBinary() {
    var fbb = new FlatBufferBuilder(0x10000);
    PointArrayData.FinishPointArrayDataBuffer(fbb, PointArrayData.Pack(fbb, this));
    return fbb.DataBuffer.ToSizedArray();
  }
}


static public class PointArrayDataVerify
{
  static public bool Verify(Google.FlatBuffers.Verifier verifier, uint tablePos)
  {
    return verifier.VerifyTableStart(tablePos)
      && verifier.VerifyVectorOfData(tablePos, 4 /*Points*/, 24 /*GSP.FB.Vec3*/, false)
      && verifier.VerifyTableEnd(tablePos);
  }
}

}
