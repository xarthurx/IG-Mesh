// <auto-generated>
//  automatically generated by the FlatBuffers compiler, do not modify
// </auto-generated>

namespace GSP.FB
{

using global::System;
using global::System.Collections.Generic;
using global::Google.FlatBuffers;

public struct PointData : IFlatbufferObject
{
  private Table __p;
  public ByteBuffer ByteBuffer { get { return __p.bb; } }
  public static void ValidateVersion() { FlatBufferConstants.FLATBUFFERS_25_2_10(); }
  public static PointData GetRootAsPointData(ByteBuffer _bb) { return GetRootAsPointData(_bb, new PointData()); }
  public static PointData GetRootAsPointData(ByteBuffer _bb, PointData obj) { return (obj.__assign(_bb.GetInt(_bb.Position) + _bb.Position, _bb)); }
  public static bool VerifyPointData(ByteBuffer _bb) {Google.FlatBuffers.Verifier verifier = new Google.FlatBuffers.Verifier(_bb); return verifier.VerifyBuffer("", false, PointDataVerify.Verify); }
  public void __init(int _i, ByteBuffer _bb) { __p = new Table(_i, _bb); }
  public PointData __assign(int _i, ByteBuffer _bb) { __init(_i, _bb); return this; }

  public GSP.FB.Vec3? Point { get { int o = __p.__offset(4); return o != 0 ? (GSP.FB.Vec3?)(new GSP.FB.Vec3()).__assign(o + __p.bb_pos, __p.bb) : null; } }

  public static void StartPointData(FlatBufferBuilder builder) { builder.StartTable(1); }
  public static void AddPoint(FlatBufferBuilder builder, Offset<GSP.FB.Vec3> pointOffset) { builder.AddStruct(0, pointOffset.Value, 0); }
  public static Offset<GSP.FB.PointData> EndPointData(FlatBufferBuilder builder) {
    int o = builder.EndTable();
    return new Offset<GSP.FB.PointData>(o);
  }
  public static void FinishPointDataBuffer(FlatBufferBuilder builder, Offset<GSP.FB.PointData> offset) { builder.Finish(offset.Value); }
  public static void FinishSizePrefixedPointDataBuffer(FlatBufferBuilder builder, Offset<GSP.FB.PointData> offset) { builder.FinishSizePrefixed(offset.Value); }
  public PointDataT UnPack() {
    var _o = new PointDataT();
    this.UnPackTo(_o);
    return _o;
  }
  public void UnPackTo(PointDataT _o) {
    _o.Point = this.Point.HasValue ? this.Point.Value.UnPack() : null;
  }
  public static Offset<GSP.FB.PointData> Pack(FlatBufferBuilder builder, PointDataT _o) {
    if (_o == null) return default(Offset<GSP.FB.PointData>);
    StartPointData(builder);
    AddPoint(builder, GSP.FB.Vec3.Pack(builder, _o.Point));
    return EndPointData(builder);
  }
}

public class PointDataT
{
  public GSP.FB.Vec3T Point { get; set; }

  public PointDataT() {
    this.Point = new GSP.FB.Vec3T();
  }
  public static PointDataT DeserializeFromBinary(byte[] fbBuffer) {
    return PointData.GetRootAsPointData(new ByteBuffer(fbBuffer)).UnPack();
  }
  public byte[] SerializeToBinary() {
    var fbb = new FlatBufferBuilder(0x10000);
    PointData.FinishPointDataBuffer(fbb, PointData.Pack(fbb, this));
    return fbb.DataBuffer.ToSizedArray();
  }
}


static public class PointDataVerify
{
  static public bool Verify(Google.FlatBuffers.Verifier verifier, uint tablePos)
  {
    return verifier.VerifyTableStart(tablePos)
      && verifier.VerifyField(tablePos, 4 /*Point*/, 24 /*GSP.FB.Vec3*/, 8, false)
      && verifier.VerifyTableEnd(tablePos);
  }
}

}
