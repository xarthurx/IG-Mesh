// <auto-generated>
//  automatically generated by the FlatBuffers compiler, do not modify
// </auto-generated>

namespace GSP.FB
{

using global::System;
using global::System.Collections.Generic;
using global::Google.FlatBuffers;

public struct MeshData : IFlatbufferObject
{
  private Table __p;
  public ByteBuffer ByteBuffer { get { return __p.bb; } }
  public static void ValidateVersion() { FlatBufferConstants.FLATBUFFERS_25_2_10(); }
  public static MeshData GetRootAsMeshData(ByteBuffer _bb) { return GetRootAsMeshData(_bb, new MeshData()); }
  public static MeshData GetRootAsMeshData(ByteBuffer _bb, MeshData obj) { return (obj.__assign(_bb.GetInt(_bb.Position) + _bb.Position, _bb)); }
  public static bool VerifyMeshData(ByteBuffer _bb) {Google.FlatBuffers.Verifier verifier = new Google.FlatBuffers.Verifier(_bb); return verifier.VerifyBuffer("", false, MeshDataVerify.Verify); }
  public void __init(int _i, ByteBuffer _bb) { __p = new Table(_i, _bb); }
  public MeshData __assign(int _i, ByteBuffer _bb) { __init(_i, _bb); return this; }

  public GSP.FB.Vec3? Vertices(int j) { int o = __p.__offset(4); return o != 0 ? (GSP.FB.Vec3?)(new GSP.FB.Vec3()).__assign(__p.__vector(o) + j * 24, __p.bb) : null; }
  public int VerticesLength { get { int o = __p.__offset(4); return o != 0 ? __p.__vector_len(o) : 0; } }
  public GSP.FB.Vec3i? Faces(int j) { int o = __p.__offset(6); return o != 0 ? (GSP.FB.Vec3i?)(new GSP.FB.Vec3i()).__assign(__p.__vector(o) + j * 12, __p.bb) : null; }
  public int FacesLength { get { int o = __p.__offset(6); return o != 0 ? __p.__vector_len(o) : 0; } }

  public static Offset<GSP.FB.MeshData> CreateMeshData(FlatBufferBuilder builder,
      VectorOffset verticesOffset = default(VectorOffset),
      VectorOffset facesOffset = default(VectorOffset)) {
    builder.StartTable(2);
    MeshData.AddFaces(builder, facesOffset);
    MeshData.AddVertices(builder, verticesOffset);
    return MeshData.EndMeshData(builder);
  }

  public static void StartMeshData(FlatBufferBuilder builder) { builder.StartTable(2); }
  public static void AddVertices(FlatBufferBuilder builder, VectorOffset verticesOffset) { builder.AddOffset(0, verticesOffset.Value, 0); }
  public static void StartVerticesVector(FlatBufferBuilder builder, int numElems) { builder.StartVector(24, numElems, 8); }
  public static void AddFaces(FlatBufferBuilder builder, VectorOffset facesOffset) { builder.AddOffset(1, facesOffset.Value, 0); }
  public static void StartFacesVector(FlatBufferBuilder builder, int numElems) { builder.StartVector(12, numElems, 4); }
  public static Offset<GSP.FB.MeshData> EndMeshData(FlatBufferBuilder builder) {
    int o = builder.EndTable();
    return new Offset<GSP.FB.MeshData>(o);
  }
  public static void FinishMeshDataBuffer(FlatBufferBuilder builder, Offset<GSP.FB.MeshData> offset) { builder.Finish(offset.Value); }
  public static void FinishSizePrefixedMeshDataBuffer(FlatBufferBuilder builder, Offset<GSP.FB.MeshData> offset) { builder.FinishSizePrefixed(offset.Value); }
  public MeshDataT UnPack() {
    var _o = new MeshDataT();
    this.UnPackTo(_o);
    return _o;
  }
  public void UnPackTo(MeshDataT _o) {
    _o.Vertices = new List<GSP.FB.Vec3T>();
    for (var _j = 0; _j < this.VerticesLength; ++_j) {_o.Vertices.Add(this.Vertices(_j).HasValue ? this.Vertices(_j).Value.UnPack() : null);}
    _o.Faces = new List<GSP.FB.Vec3iT>();
    for (var _j = 0; _j < this.FacesLength; ++_j) {_o.Faces.Add(this.Faces(_j).HasValue ? this.Faces(_j).Value.UnPack() : null);}
  }
  public static Offset<GSP.FB.MeshData> Pack(FlatBufferBuilder builder, MeshDataT _o) {
    if (_o == null) return default(Offset<GSP.FB.MeshData>);
    var _vertices = default(VectorOffset);
    if (_o.Vertices != null) {
      StartVerticesVector(builder, _o.Vertices.Count);
      for (var _j = _o.Vertices.Count - 1; _j >= 0; --_j) { GSP.FB.Vec3.Pack(builder, _o.Vertices[_j]); }
      _vertices = builder.EndVector();
    }
    var _faces = default(VectorOffset);
    if (_o.Faces != null) {
      StartFacesVector(builder, _o.Faces.Count);
      for (var _j = _o.Faces.Count - 1; _j >= 0; --_j) { GSP.FB.Vec3i.Pack(builder, _o.Faces[_j]); }
      _faces = builder.EndVector();
    }
    return CreateMeshData(
      builder,
      _vertices,
      _faces);
  }
}

public class MeshDataT
{
  public List<GSP.FB.Vec3T> Vertices { get; set; }
  public List<GSP.FB.Vec3iT> Faces { get; set; }

  public MeshDataT() {
    this.Vertices = null;
    this.Faces = null;
  }
  public static MeshDataT DeserializeFromBinary(byte[] fbBuffer) {
    return MeshData.GetRootAsMeshData(new ByteBuffer(fbBuffer)).UnPack();
  }
  public byte[] SerializeToBinary() {
    var fbb = new FlatBufferBuilder(0x10000);
    MeshData.FinishMeshDataBuffer(fbb, MeshData.Pack(fbb, this));
    return fbb.DataBuffer.ToSizedArray();
  }
}


static public class MeshDataVerify
{
  static public bool Verify(Google.FlatBuffers.Verifier verifier, uint tablePos)
  {
    return verifier.VerifyTableStart(tablePos)
      && verifier.VerifyVectorOfData(tablePos, 4 /*Vertices*/, 24 /*GSP.FB.Vec3*/, false)
      && verifier.VerifyVectorOfData(tablePos, 6 /*Faces*/, 12 /*GSP.FB.Vec3i*/, false)
      && verifier.VerifyTableEnd(tablePos);
  }
}

}
